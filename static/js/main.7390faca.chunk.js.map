{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["api","App","useState","query","setQuery","weather","setWeather","className","main","temp","type","placeholder","onChange","event","target","value","onKeyPress","key","fetch","then","result","json","console","log","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","generateDate","Date","Math","round","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"gQAGMA,G,MACC,oCADDA,EAEE,2CA2EOC,MAxEf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEiBF,mBAAS,IAF1B,mBAENG,EAFM,KAEGC,EAFH,KA6Bd,OACC,yBAAKC,UACqB,oBAAhBF,EAAQG,MACXH,EAAQG,KAAKC,KAAO,OAAU,GAChC,YAEE,OAEL,8BACE,yBAAKF,UAAU,oBACb,2BAAOG,KAAK,OACXH,UAAU,aACTI,YAAY,2BACZC,SAAU,SAAAC,GAAK,OAAIT,EAASS,EAAMC,OAAOC,QACzCA,MAAOZ,EACPa,WAxCW,SAAAH,GACA,UAAdA,EAAMI,KACPC,MAAM,GAAD,OAAIlB,EAAJ,qBAAyBG,EAAzB,+BAAqDH,IACxDmB,MAAK,SAAAC,GAAM,OAAIA,EAAOC,UACtBF,MAAK,SAAAC,GACLd,EAAWc,GACXhB,EAAS,IACTkB,QAAQC,IAAIH,UAoCW,oBAAhBf,EAAQG,KACd,6BACA,yBAAKD,UAAU,sBACb,wBAAIA,UAAU,YACTF,EAAQmB,KADb,KACqBnB,EAAQoB,IAAIC,SAEjC,wBAAInB,UAAU,QArCF,SAAAoB,GAEnB,IAIIC,EAFO,CAAC,SAAU,SAAU,UAAW,YAAa,WAAW,SAAU,YAE9DD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EANS,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,YAM7FL,EAAEM,YACjBC,EAAOP,EAAEQ,cAEb,MAAM,GAAN,OAAUP,EAAV,YAAiBE,EAAjB,YAAyBE,EAAzB,YAAkCE,GA2BtBE,CAAa,IAAIC,QAGxB,yBAAK9B,UAAU,qBACb,wBAAIA,UAAU,eACX+B,KAAKC,MAAMlC,EAAQG,KAAKC,KAAO,QADlC,SAGA,wBAAIF,UAAU,WACXF,EAAQA,QAAQ,GAAGG,QAItB,MC9DSgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlC,QAAQkC,MAAMA,EAAMC,c","file":"static/js/main.7390faca.chunk.js","sourcesContent":["import React, {useState} from \"react\";\nimport './App.css';\n\nconst api = {\n  key: \"2def17597f4f24038aab6ff73f34a2ec\",\n  base: \"https://api.openweathermap.org/data/2.5/\"\n}\n\nfunction App() {\n  const [query, setQuery] = useState(\"\");\n  const [weather, setWeather] = useState({});\n\n  let searchEngine = event => {\n    if(event.key === \"Enter\") {\n      fetch(`${api.base}weather?q=${query}&units=matric&APPID=${api.key}`)\n       .then(result => result.json())\n       .then(result => {\n        setWeather(result);\n        setQuery(\"\");\n        console.log(result);\n       });\n    }\n  }\n\n  const generateDate = d => {\n\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"December\",];\n\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\",\"Friday\", \"Saturday\"];\n\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n\n    return `${day} ${date} ${month} ${year}`;\n  }\n return(\n  <div className={\n    (typeof weather.main != \"undefined\") \n    ? (((weather.main.temp - 273.15) > 15)\n     ? \"app sunny\"\n      : \"app\")\n       : \"app\"\n}>\n    <main>\n      <div className=\"search-container\">\n        <input type=\"text\"\n         className=\"search-bar\"\n          placeholder=\"Enter country or city...\"\n          onChange={event => setQuery(event.target.value)}\n          value={query}\n          onKeyPress={searchEngine}\n         />\n      </div>\n      {(typeof weather.main != \"undefined\") ?  (\n         <div>\n         <div className=\"location-container\">\n           <h1 className=\"location\">\n               {weather.name}, {weather.sys.country}\n           </h1>\n           <h2 className=\"date\">\n               {generateDate(new Date())}\n           </h2>\n         </div>\n         <div className=\"weather-container\">\n           <h1 className=\"temperature\">\n             {Math.round(weather.main.temp - 273.15)}Â°C\n           </h1>\n           <h1 className=\"weather\">\n             {weather.weather[0].main}\n           </h1>\n         </div>\n         </div>\n      ) : (\"\")}\n     \n    </main>\n  </div>\n );\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}